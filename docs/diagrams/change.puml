@startuml
actor User as User
hide footbox
participant ChangeCommand as ":ChangeCommand"
participant Printer as ":Printer"
participant CoinflipException as ":CoinflipException"

User -> ChangeCommand: execute()
activate ChangeCommand


ChangeCommand -> ChangeCommand: change()
activate ChangeCommand
ChangeCommand -> ChangeCommand: checkNumberOfWords(words)
activate ChangeCommand
opt words.length != 2
create CoinflipException
ChangeCommand -> CoinflipException : CoinflipException(CoinflipException.CHANGE_INVALID_FORMAT)
activate CoinflipException
CoinflipException --> User
deactivate CoinflipException
end
note right of CoinflipException
The other functions' exception throws, such as in
checkNumerical(words[1]), have been
intentionally omitted to prevent cluttering
end note
ChangeCommand --> ChangeCommand
deactivate ChangeCommand
ChangeCommand -> ChangeCommand: checkNumerical(words[1])
activate ChangeCommand
ChangeCommand --> ChangeCommand
deactivate ChangeCommand
ChangeCommand -> ChangeCommand: checkCanBeInteger(words[1])
activate ChangeCommand
ChangeCommand --> ChangeCommand
deactivate ChangeCommand
ChangeCommand -> ChangeCommand: checkNonNegative(betAmount)
activate ChangeCommand
ChangeCommand --> ChangeCommand
deactivate ChangeCommand
ChangeCommand -> ChangeCommand: checkWithinBalance(betAmount, userData.balance)
activate ChangeCommand
ChangeCommand --> ChangeCommand
deactivate ChangeCommand

ChangeCommand -> Printer: printBetAmount()
activate Printer
Printer --> ChangeCommand
deactivate Printer
ChangeCommand --> ChangeCommand
deactivate ChangeCommand
ChangeCommand --> User
deactivate ChangeCommand
@enduml

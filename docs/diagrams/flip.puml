@startuml
actor User as User
hide footbox
participant FlipCommand as ":FlipCommand"
participant Printer as ":Printer"
participant AchievementList as ":AchievementList"
participant CoinflipException as ":CoinflipException"

User -> FlipCommand: execute()
activate FlipCommand


FlipCommand -> FlipCommand: flip()
activate FlipCommand
FlipCommand -> FlipCommand: checkNumberOfWords(words)
activate FlipCommand
opt words.length != 2
create CoinflipException
FlipCommand -> CoinflipException : CoinflipException(CoinflipException.FLIP_INVALID_FORMAT)
activate CoinflipException
CoinflipException --> User
deactivate CoinflipException
end
note right of CoinflipException
The other functions' exception throws (such as in
checkValidOutcomeWord(words[1])) have been
intentionally omitted to prevent cluttering
end note
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: checkValidOutcomeWord(words[1])
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: checkWithinBalance(userData.betAmount, userData.balance)
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: generateFlip()
activate FlipCommand
note right of FlipCommand
The "correct" guess will be generated here
end note
FlipCommand --> FlipCommand : randomly generated "Heads" or "Tails"
deactivate FlipCommand
FlipCommand -> FlipCommand: getOutcome(actualFlip, words[1])
activate FlipCommand
note right of FlipCommand
The user's input will be compared with the "correct" guess
end note
FlipCommand --> FlipCommand : returns boolean, true if user wins and false otherwise
deactivate FlipCommand
FlipCommand -> AchievementList: update(userData, outcome)
activate AchievementList
AchievementList --> FlipCommand
deactivate AchievementList
FlipCommand -> FlipCommand: processOutcome(outcome)
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand


FlipCommand -> Printer: printFlipOutcome(actualFlip, outcome, userData.betAmount)
activate Printer
Printer --> FlipCommand
deactivate Printer
FlipCommand -> Printer: printFlipSummary(userData)
activate Printer
Printer --> FlipCommand
deactivate Printer
FlipCommand -> Printer: printUnlockedAchievements(achievementList)
activate Printer
Printer --> FlipCommand
deactivate Printer
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand --> User
deactivate FlipCommand
@enduml
